substitutions:
  name: airgradient-02-esp32
  sgp30_eco2_baseline: 'YOUR_VALUE_HERE'
  sgp30_tvoc_baseline: 'YOUR_VALUE_HERE'
  
### Everything below this can be copy/paste between similar devices

esphome:
  name: $name
  platformio_options:
    board_build.flash_mode: dio # Necessary for esp-idf framework https://github.com/platformio/platform-espressif32/issues/630

esp32:
  board: lolin_c3_mini
  framework:
    type: esp-idf

logger:
  baud_rate: 0 # Disabled because we need two UARTs (for CO2 and PM sensors) - this used to work fine without this directive pre 2024.5.x / 6.x?

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret basement_wifi_ssid
  password: !secret wifi_password
  output_power: 8.5dB # Wifi Connections failed without this - see https://forum.airgradient.com/t/new-wemos-board/251/17

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "$name Flbk"
    password: !secret fallback_password

captive_portal:

bluetooth_proxy: # Optional and can be removed
  active: true

# Configuration for AirGradient DIY v2 device
# https://www.esphome-devices.com/devices/AirGradient-DIY/

# https://esphome.io/components/uart.html#uart
uart:
  - rx_pin: GPIO6
    tx_pin: GPIO7
    baud_rate: 9600
    id: senseair_s8_uart

  - rx_pin: GPIO1
    tx_pin: GPIO0
    baud_rate: 9600
    id: pms5003_uart

i2c: # if i2c bus still seems flaky, explore disabling scanning?
  scl: GPIO10
  sda: GPIO8
  frequency: 300kHz # highest frequency that works for all components
  #timeout: 200us # suggested here: https://esphome.io/components/sensor/sht3xd.html?highlight=sht31#i2c-configuration-when-using-higher-i2c-frequencies, but didn't have luck 
  
sensor:
    # https://esphome.io/components/sensor/pmsx003.html?highlight=pms5003
  - platform: pmsx003
    type: PMSX003
    uart_id: pms5003_uart
    pm_1_0:
      name: "$name PM <1.0µm"
      id: pm1
      filters:
        - sliding_window_moving_average:
            window_size: 30
            send_every: 30
    pm_2_5:
      name: "$name PM <2.5µm"
      id: pm2_5
      filters:
        - sliding_window_moving_average:
            window_size: 30
            send_every: 30
    pm_10_0:
      name: "$name PM <10.0µm"
      id: pm10
      filters:
        - sliding_window_moving_average:
            window_size: 30
            send_every: 30

    # https://esphome.io/components/sensor/senseair.html
  - platform: senseair
    id: senseair_s8
    co2:
      name: "$name CO2"
      id: co2
    update_interval: 60s
    uart_id: senseair_s8_uart

    # https://esphome.io/components/sensor/sht3xd.html?highlight=sht31
  - platform: sht3xd
    temperature:
      name: "$name Temperature"
      id: temp
    humidity:
      name: "$name Humidity"
      id: humidity
    update_interval: 60s
    heater_enabled: false

  - platform: sgp30
    eco2:
      name: "$name eCO2"
      filters:
        - median:
            window_size: 59
            send_every: 59
            send_first_at: 29
    tvoc:
      name: "$name TVOC"
      filters:
        - median:
            window_size: 59
            send_every: 59
            send_first_at: 29
      id: tvoc
    eco2_baseline:
      name: "$name eCO2 baseline"
      unit_of_measurement: "°"
    tvoc_baseline:
      name: "$name TVOC baseline"
      unit_of_measurement: "°"
    compensation: 
      temperature_source: temp
      humidity_source: humidity
    store_baseline: yes
    update_interval: 1s
    baseline:
      eco2_baseline: $sgp30_eco2_baseline
      tvoc_baseline: $sgp30_tvoc_baseline
    
    # The WHO guidelines work with 24-hour averages of the PM2.5 and PM10 sensors
  - platform: template
    name: "$name PM <2.5µm 24h average"
    id: pm2_5_avg_24h
    icon: mdi:chemical-weapon
    unit_of_measurement: µg/m³
    lambda: |-
      return id(pm2_5).state;
    update_interval: 60s
    filters:
      - sliding_window_moving_average:
          window_size: 1440  # = 24 hours x 60 minutes
          send_every: 1
  - platform: template
    name: "$name PM <10.0µm 24h average"
    id: pm10_avg_24h
    icon: mdi:chemical-weapon
    unit_of_measurement: µg/m³
    lambda: |-
      return id(pm10).state;
    update_interval: 60s
    filters:
      - sliding_window_moving_average:
          window_size: 1440  # = 24 hours x 60 minutes
          send_every: 1
  
  - platform: wifi_signal
    name: "$name WiFi Signal"
    update_interval: 5min
    
  - platform: uptime # Uptime in Seconds
    name: $name Uptime Sensor
    id: uptime_sensor
    update_interval: 5min
    internal: True
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m" : "")
              ).c_str();
              
# A textual presentation of the AQI
text_sensor:
  - platform: template  # Human Readable Uptime
    name: $name Uptime
    id: uptime_human
    icon: mdi:clock-start
  

time:
  - platform: homeassistant
    id: homeassistant_time

font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto Mono"
    id: roboto
    size: 15

display:
  - platform: ssd1306_i2c
    # https://esphome.io/components/display/ssd1306.html?highlight=display
    model: "SH1106 128x64"
    id: oled_display
    reset_pin: GPIO2
    address: 0x3C
    #update_interval: 1s # May fix wifi issues. Also check i2c frequency. https://github.com/esphome/issues/issues/1329
    lambda: |-
      static bool dot = false;
      
      if (id(night_dnd).state && (id(homeassistant_time).now().hour > 22 || id(homeassistant_time).now().hour < 7))
      {
        if (dot)
        {
          it.print(0, 0, id(roboto), TextAlign::TOP_LEFT, ".");
        }
      }
      else
      {
        it.printf(0, 0, id(roboto), "%.1f°F",(id(temp).state * 1.8) + 32);
        it.printf(it.get_width(), 0, id(roboto), TextAlign::TOP_RIGHT, "%.0f%%",id(humidity).state);
        it.printf(0, 15, id(roboto), "2.5    %.0f", id(pm2_5).state);
        it.printf(0, 30, id(roboto), "CO2    %.0f", id(co2).state);
        it.printf(0, 45, id(roboto), "VOC    %.0f", id(tvoc).state);

        if (dot)
        {
          it.print(it.get_width(), it.get_height(), id(roboto), TextAlign::BOTTOM_RIGHT, ".");
        }
      }

      dot = !dot;

interval:
  - interval: 180s
    # Two-minute interval to extend the life span of the PMS5003 sensor
    startup_delay: 5s
    then:
      - switch.turn_on: pms_switch
      - delay: 45s
      - switch.turn_off: pms_switch

# Source: https://github.com/airgradienthq/arduino/blob/master/AirGradient.cpp#L123
switch:
  - platform: template
    name: "$name PMS5003"
    internal: true
    id: pms_switch
    optimistic: true
    turn_on_action:
      - uart.write:
          id: pms5003_uart
          data: [0x42, 0x4D, 0xE4, 0x00, 0x01, 0x01, 0x74]
    turn_off_action:
      - uart.write:
          id: pms5003_uart
          data: [0x42, 0x4D, 0xE4, 0x00, 0x00, 0x01, 0x73]
  - platform: template
    name: "Enable Night DND"
    optimistic: True
    id: night_dnd
    restore_mode: ALWAYS_ON
  - platform: template
    name: "$name ABC"
    optimistic: true
    on_turn_on:
      senseair.abc_enable: senseair_s8
    on_turn_off:
      senseair.abc_disable: senseair_s8
  - platform: restart
    name: "$name Restart"

button:
  - platform: template
    name: $name Manual Senseair S8 Calibration
    id: calibrate_sensair_s8
    on_press:
      then:
        - senseair.background_calibration: senseair_s8
        - delay: 75s
        - senseair.background_calibration_result: senseair_s8
  - platform: template
    name: $name Log Senseair S8 ABC Period
    id: get_senseair_s8_abc_period
    on_press:
      then:
          - senseair.abc_get_period: senseair_s8
