blueprint:
  name: Core Temporary Automation Pause
  description: >
    Core version of the temporary automation pause blueprint that only handles 
    the automation disablement, trigger, and countdown. Designed to be triggered 
    by another automation rather than directly by a button press.
  domain: automation
  input:
    target_automations:
      name: Target Automations
      description: The automations that will be temporarily disabled.
      selector:
        target:
          entity:
            domain: automation
    pause_duration:
      name: Pause Duration (minutes)
      description: >
        Number of minutes to pause the automation for.
      selector:
        number:
          min: 1
          max: 1440
          step: 1
          unit_of_measurement: minutes
          mode: box
    pause_input_switch:
      name: Pause Switch
      description: >
        Input boolean to use to track the pause state.
        Create from [helpers](/config/helpers).
      selector:
        entity:
          filter:
            - domain: input_boolean
    countdown_counter:
      name: Countdown Counter
      description: >
        Counter used to track the **minutes** until the automation is re-enabled.
        Create from [helpers](/config/helpers). 
        Tips:
          - **Max** should be at least the maximum pause duration you'll use
          - **Min** should be 0
          - **Step Size** should match the number of minutes in **Countdown check time pattern** below
          - Leave **Restore the last known value when Home Assistant starts** enabled (this makes things robust)
      selector:
        entity:
          filter:
            - domain: counter
    check_countdown_interval:
      name: Countdown check time pattern (minutes)
      description: >
        **Minutes-based** time pattern for how often to re-run this automation 
        to check if the target automation should be re-enabled. e.g. `/5` for every 5 minutes.
      default: "/5"
      selector:
        text:

trigger:
  - platform: event
    event_type: call_service
    event_data:
      domain: automation
      service: trigger
      service_data:
        automation_id: this.entity_id
    id: direct_trigger
  - platform: time_pattern
    minutes: !input check_countdown_interval
    id: countdown

variables:
  pause_duration: !input pause_duration

action:
  - choose:
      - conditions:
          - condition: trigger
            id: direct_trigger
        sequence:
          - service: automation.turn_off
            target: !input target_automations
          - service: input_boolean.turn_on
            target:
              entity_id: !input pause_input_switch
          - service: counter.set_value
            data:
              value: "{{ pause_duration }}"
            target:
              entity_id: !input countdown_counter
      - conditions:
          - condition: and
            conditions:
              - condition: trigger
                id: countdown
              - condition: numeric_state
                entity_id: !input countdown_counter
                above: 0
              - condition: state
                entity_id: !input pause_input_switch
                state: "on"
        sequence:
          - service: counter.decrement
            target:
              entity_id: !input countdown_counter
      - conditions:
          - condition: and
            conditions:
              - condition: trigger
                id: countdown
              - condition: numeric_state
                entity_id: !input countdown_counter
                below: 1
              - condition: state
                entity_id: !input pause_input_switch
                state: "on"
        sequence:
          - service: automation.turn_on
            target: !input target_automations
          - service: counter.reset
            target:
              entity_id: !input countdown_counter
          - service: input_boolean.turn_off
            target:
              entity_id: !input pause_input_switch